{"version":3,"sources":["../src/datasource.js"],"names":["_","NetXMSDatasource","instanceSettings","$q","backendSrv","templateSrv","type","jsonData","url","endsWith","slice","length","name","user","password","q","authentication","sessionId","options","query","buildQueryParameters","targets","includes","datasourceRequest","method","params","headers","then","result","data","response","status","session","message","title","mapToTextValue","map","d","i","id","sort","a","b","localeCompare","parameters","interval","intervalMs","from","range","to","JSON","stringify"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\n\nexport class NetXMSDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv)\n  {\n    this.type = instanceSettings.type;\n    if (instanceSettings.jsonData.url.endsWith(\"/\"))\n      this.url = instanceSettings.jsonData.url.slice(0, (instanceSettings.jsonData.url.length-1));\n    else\n      this.url = instanceSettings.jsonData.url;\n    this.name = instanceSettings.name;\n    this.user = instanceSettings.jsonData.user;\n    this.password = (instanceSettings.jsonData.password == null) ? \"\" : instanceSettings.jsonData.password;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.authentication = \"{ \\\"login\\\": \\\"\" + this.user + \"\\\", \\\"password\\\": \\\"\" + this.password + \"\\\" }\";\n    this.sessionId = 0;\n  }\n\n  query(options)\n  {\n    var query = this.buildQueryParameters(options);\n    if (query.targets.includes(\"type\\\":\\\"Alarms\\\"\"))\n      var url = \"alarms\";\n    else\n      var url = \"datacollection\";\n\n    return this.backendSrv.datasourceRequest(\n    {\n      url: this.url + '/grafana/' + url,\n      method: 'GET',\n      params: query,\n      headers: { 'X-SessionId': this.sessionId,\n                 'X-Login': this.user,\n                 'X-Password': this.password }\n    }).then(result => {\n      if (result.headers(\"X-SessionId\") !== null)\n        this.sessionId = result.headers(\"X-SessionId\");\n      return result });\n  }  \n\n  testDatasource()\n  {\n    return this.backendSrv.datasourceRequest(\n    {\n      url: this.url + '/sessions',\n      method: 'POST',\n      data: this.authentication,\n      headers: { 'Content-Type': 'application/json' }\n    }).then(response => \n      {\n        if (response.status === 200)\n        {\n          this.backendSrv.datasourceRequest(\n          {\n            url: this.url + '/sessions/' + response.data.session,\n            method: 'DELETE',\n            headers: { 'X-SessionId': response.data.session } \n          })\n          return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n        }\n      });\n  }\n\n  /*\n   * Not implemented yet\n   */\n  /*annotationQuery(options) {\n    var query = this.templateSrv.replace(options.annotation.query, {}, 'glob');\n    var annotationQuery = {\n      range: options.range,\n      annotation: {\n        name: options.annotation.name,\n        datasource: options.annotation.datasource,\n        enable: options.annotation.enable,\n        iconColor: options.annotation.iconColor,\n        query: query\n      },\n      rangeRaw: options.rangeRaw\n    };\n\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/annotations',\n      method: 'POST',\n      data: annotationQuery\n    }).then(result => {\n      return result.data;\n    });\n  }*/\n\n  metricFindQuery(options, url)\n  {\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/grafana/' + url,\n      method: 'GET',\n      params: options,\n      headers: { 'X-SessionId': this.sessionId,\n                 'X-Login': this.user,\n                 'X-Password': this.password }\n    }).then(this.mapToTextValue);\n  }\n\n  mapToTextValue(result)\n  {\n    var map = _.map(result.data, (d, i) => {\n      return { name: d, id: i };\n    });\n    return map.sort(function (a, b) {\n      return a.name.localeCompare(b.name);\n    });\n  }\n\n  buildQueryParameters(options) {\n    var parameters = {\n      interval: options.intervalMs,\n      from: options.range.from,\n      to: options.range.to,\n      targets: JSON.stringify(options.targets)\n      /*annotation: {\n      },*/\n    };\n    return parameters\n  }\n}"]}