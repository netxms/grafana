{"version":3,"sources":["../src/datasource.js"],"names":["_","NetXMSDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","q","sessionId","basicAuth","withCredentials","_request","method","data","params","options","headers","datasourceRequest","then","response","get","query","buildQueryParameters","targets","includes","status","session","message","title","mapToTextValue","result","map","d","i","id","sort","a","b","localeCompare","parameters","interval","intervalMs","from","range","toISOString","to","JSON","stringify"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\n\nexport class NetXMSDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv)\n  {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.sessionId = 0;\n    this.basicAuth = instanceSettings.basicAuth;\n    this.withCredentials = instanceSettings.withCredentials;\n\n    this._request = function(method, url, data, params) {\n      var options = {\n        url: this.url + \"/\" + url,\n        method: method,\n        data: data,\n        headers: {},\n        params: params\n      };\n\n      if (this.basicAuth || this.withCredentials) {\n        options.withCredentials = true;\n      }\n      if (this.basicAuth) {\n        options.headers[\"Authorization\"] = this.basicAuth;\n      }\n      if (this.sessionId)\n        options.headers[\"Session-Id\"] = this.sessionId;\n\n      return backendSrv.datasourceRequest(options).then(response =>\n        {\n          if (typeof response.headers === 'function') {\n            if (response.headers(\"Session-Id\")) {\n              this.sessionId = response.headers(\"Session-Id\");\n            }\n          } else {\n            this.sessionId = response.headers.get(\"Session-Id\");\n          }\n          return response;\n        });\n    };\n  }\n\n  query(options)\n  {\n    var query = this.buildQueryParameters(options);\n    if (query.targets.includes(\"type\\\":\\\"Alarms\\\"\"))\n      var url = \"grafana/alarms\";\n    else\n      var url = \"grafana/datacollection\";\n\n    return this._request('GET', url, null, query);\n  }  \n\n  testDatasource()\n  {\n    return this._request('POST', 'sessions', null, null).then(response =>\n    {\n      if (response.status === 200)\n      {\n        this._request('DELETE', 'sessions/' + response.data.session, null, null);\n        return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n      }\n    });\n  }\n\n  /*\n   * Not implemented yet\n   */\n  /*annotationQuery(options) {\n    var query = this.templateSrv.replace(options.annotation.query, {}, 'glob');\n    var annotationQuery = {\n      range: options.range,\n      annotation: {\n        name: options.annotation.name,\n        datasource: options.annotation.datasource,\n        enable: options.annotation.enable,\n        iconColor: options.annotation.iconColor,\n        query: query\n      },\n      rangeRaw: options.rangeRaw\n    };\n\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/annotations',\n      method: 'POST',\n      data: annotationQuery\n    }).then(result => {\n      return result.data;\n    });\n  }*/\n\n  metricFindQuery(options, url)\n  {\n    return this._request('GET', 'grafana/' + url, null, options).then(\n      result =>\n      {\n        return this.mapToTextValue(result);\n      });\n  }\n\n  mapToTextValue(result)\n  {\n    var map = _.map(result.data, (d, i) => {\n      return { name: d, id: i };\n    });\n    return map.sort(function (a, b) {\n      return a.name.localeCompare(b.name);\n    });\n  }\n\n  buildQueryParameters(options) {\n    var parameters = {\n      interval: options.intervalMs,\n      from: '\"' + options.range.from.toISOString() + '\"', // dirty hack to be compatible with old API\n      to: '\"' + options.range.to.toISOString() + '\"', // dirty hack to be compatible with old API\n      targets: JSON.stringify(options.targets)\n      /*annotation: {\n      },*/\n    };\n    return parameters\n  }\n}"]}