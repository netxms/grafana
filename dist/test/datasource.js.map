{"version":3,"sources":["../../src/datasource.js"],"names":["NetXMSDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","q","sessionId","basicAuth","withCredentials","_request","method","data","params","options","headers","datasourceRequest","then","response","get","query","buildQueryParameters","targets","includes","status","session","message","title","result","mapToTextValue","map","_","d","i","id","sort","a","b","localeCompare","parameters","interval","intervalMs","from","range","toISOString","to","JSON","stringify"],"mappings":"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","sourcesContent":["import _ from \"lodash\";\n\nexport class NetXMSDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv)\n  {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.sessionId = null;\n    this.basicAuth = instanceSettings.basicAuth;\n    this.withCredentials = instanceSettings.withCredentials;\n\n    this._request = function(method, url, data, params) {\n      var options = {\n        url: this.url + \"/\" + url,\n        method: method,\n        data: data,\n        headers: {},\n        params: params\n      };\n\n      if (this.basicAuth || this.withCredentials) {\n        options.withCredentials = true;\n      }\n      if (this.basicAuth) {\n        options.headers[\"Authorization\"] = this.basicAuth;\n      }\n      if (this.sessionId)\n        options.headers[\"Session-Id\"] = this.sessionId;\n\n      return backendSrv.datasourceRequest(options).then(response =>\n        {\n          var sessionId = null;\n          if (typeof response.headers === 'function') {\n            sessionId = response.headers(\"Session-Id\");\n          } else {\n            sessionId = response.headers.get(\"Session-Id\");\n          }\n          if (sessionId) {\n             this.sessionId = sessionId;\n          }\n          return response;\n        });\n    };\n  }\n\n  query(options)\n  {\n    var query = this.buildQueryParameters(options);\n    if (query.targets.includes(\"type\\\":\\\"Alarms\\\"\"))\n      var url = \"grafana/alarms\";\n    else\n      var url = \"grafana/datacollection\";\n\n    return this._request('GET', url, null, query);\n  }  \n\n  testDatasource()\n  {\n    return this._request('POST', 'sessions', null, null).then(response =>\n    {\n      if (response.status === 200)\n      {\n        this._request('DELETE', 'sessions/' + response.data.session, null, null);\n        return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n      }\n    });\n  }\n\n  /*\n   * Not implemented yet\n   */\n  /*annotationQuery(options) {\n    var query = this.templateSrv.replace(options.annotation.query, {}, 'glob');\n    var annotationQuery = {\n      range: options.range,\n      annotation: {\n        name: options.annotation.name,\n        datasource: options.annotation.datasource,\n        enable: options.annotation.enable,\n        iconColor: options.annotation.iconColor,\n        query: query\n      },\n      rangeRaw: options.rangeRaw\n    };\n\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/annotations',\n      method: 'POST',\n      data: annotationQuery\n    }).then(result => {\n      return result.data;\n    });\n  }*/\n\n  metricFindQuery(options, url)\n  {\n    return this._request('GET', 'grafana/' + url, null, options).then(\n      result =>\n      {\n        return this.mapToTextValue(result);\n      });\n  }\n\n  mapToTextValue(result)\n  {\n    var map = _.map(result.data, (d, i) => {\n      return { name: d, id: i };\n    });\n    return map.sort(function (a, b) {\n      return a.name.localeCompare(b.name);\n    });\n  }\n\n  buildQueryParameters(options) {\n    var parameters = {\n      interval: options.intervalMs,\n      from: '\"' + options.range.from.toISOString() + '\"', // dirty hack to be compatible with old API\n      to: '\"' + options.range.to.toISOString() + '\"', // dirty hack to be compatible with old API\n      targets: JSON.stringify(options.targets)\n      /*annotation: {\n      },*/\n    };\n    return parameters\n  }\n}\n"],"file":"datasource.js"}